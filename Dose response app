library(shiny)
library(bs4Dash)
library(dosresmeta)
library(ggplot2)
library(DT)
library(rms)       # for rcs()
library(shinyjs)   # for download functionality

# ---------------------------
# Helper Functions
# ---------------------------
filter_data <- function(data) {
  # Remove studies with fewer than two non-reference doses.
  dat_list <- split(data, data$id)
  dat_list <- lapply(dat_list, function(x) {
    ref <- min(x$dose)
    if(sum(x$dose != ref) < 2) return(NULL) else return(x)
  })
  do.call(rbind, dat_list)
}

normalize_pred <- function(pred) {
  # Force all prediction vectors to the same (minimum) length.
  n <- min(length(pred$dose), length(pred$pred), length(pred$ci.lb), length(pred$ci.ub))
  pred$dose  <- pred$dose[1:n]
  pred$pred  <- pred$pred[1:n]
  pred$ci.lb <- pred$ci.lb[1:n]
  pred$ci.ub <- pred$ci.ub[1:n]
  pred
}

fix_pred <- function(pred) {
  pred <- normalize_pred(pred)
  n_common <- min(length(pred$dose), length(pred$pred))
  pred$dose <- pred$dose[1:n_common]
  pred$pred <- pred$pred[1:n_common]
  if(!is.null(pred$ci.lb)) pred$ci.lb <- pred$ci.lb[1:n_common]
  if(!is.null(pred$ci.ub)) pred$ci.ub <- pred$ci.ub[1:n_common]
  pred
}

make_forest_data <- function(dat) {
  dat$RR    <- exp(dat$logrr)
  dat$RR_lb <- exp(dat$logrr - 1.96 * dat$se)
  dat$RR_ub <- exp(dat$logrr + 1.96 * dat$se)
  dat
}

build_coef_table <- function(lin, quad, spl) {
  get_coef_df <- function(mod, modName) {
    if(is.null(mod)) return(NULL)
    coefs <- tryCatch(coef(mod), error = function(e) NULL)
    ses   <- tryCatch(sqrt(diag(vcov(mod))), error = function(e) rep(NA, length(coefs)))
    if(is.null(coefs)) return(NULL)
    data.frame(Model = modName,
               Term = names(coefs),
               Estimate = round(coefs, 3),
               SE = round(ses, 3),
               stringsAsFactors = FALSE)
  }
  df1 <- get_coef_df(lin, "Linear")
  df2 <- get_coef_df(quad, "Quadratic")
  df3 <- get_coef_df(spl, "Spline")
  rbind(df1, df2, df3)
}

make_data_summary <- function(dat) {
  n_obs <- nrow(dat)
  n_studies <- length(unique(dat$id))
  dose_range <- range(dat$dose, na.rm = TRUE)
  avg_dose <- round(mean(dat$dose, na.rm = TRUE), 2)
  paste("Number of observations:", n_obs, "\n",
        "Number of studies:", n_studies, "\n",
        "Dose range:", paste(dose_range, collapse = " - "), "\n",
        "Average dose:", avg_dose)
}

# ---------------------------
# UI
# ---------------------------
ui <- bs4DashPage(
  header = bs4DashNavbar(title = "Doseâ€“Response Meta-Analysis App"),
  sidebar = bs4DashSidebar(
    skin = "light",
    bs4SidebarMenu(
      bs4SidebarMenuItem("Data", tabName = "data", icon = icon("table")),
      bs4SidebarMenuItem("Data Summary", tabName = "datasum", icon = icon("info")),
      bs4SidebarMenuItem("Linear Model", tabName = "linear", icon = icon("chart-line")),
      bs4SidebarMenuItem("Quadratic Model", tabName = "quadratic", icon = icon("project-diagram")),
      bs4SidebarMenuItem("Spline Model", tabName = "spline", icon = icon("wave-square")),
      bs4SidebarMenuItem("Residuals", tabName = "residual", icon = icon("chart-area")),
      bs4SidebarMenuItem("Fitted vs. Observed", tabName = "fitObs", icon = icon("line-chart")),
      bs4SidebarMenuItem("Q-Q Plot", tabName = "qq", icon = icon("sliders-h")),
      bs4SidebarMenuItem("Residual Histogram", tabName = "hist", icon = icon("bar-chart")),
      bs4SidebarMenuItem("Bubble Plot", tabName = "bubble", icon = icon("circle")),
      bs4SidebarMenuItem("Study Trends", tabName = "studytrend", icon = icon("th")),
      bs4SidebarMenuItem("Forest Plot", tabName = "forest", icon = icon("list")),
      bs4SidebarMenuItem("Model Comparison", tabName = "compare", icon = icon("balance-scale")),
      bs4SidebarMenuItem("Model Coefficients", tabName = "coef", icon = icon("table")),
      bs4SidebarMenuItem("CSV Template", tabName = "csv", icon = icon("file")),
      bs4SidebarMenuItem("Options", tabName = "options", icon = icon("sliders-h")),
      bs4SidebarMenuItem("Download Plots", tabName = "download", icon = icon("download")),
      bs4SidebarMenuItem("About", tabName = "about", icon = icon("info-circle"))
    )
  ),
  body = bs4DashBody(
    useShinyjs(),
    bs4TabItems(
      # Data Tab
      bs4TabItem(
        tabName = "data",
        fluidRow(
          box(title = "Upload Data (CSV)", width = 6, status = "primary", solidHeader = TRUE,
              fileInput("file", "Choose CSV File",
                        accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
              helpText("Required columns: id, dose, logrr, se, type, cases, n. If none is uploaded, the built-in alcohol_cvd dataset is used.")
          ),
          box(title = "Data Preview", width = 6, status = "info", solidHeader = TRUE,
              DTOutput("dataTable"))
        )
      ),
      # Data Summary Tab
      bs4TabItem(
        tabName = "datasum",
        fluidRow(
          box(title = "Data Summary", width = 12, status = "info", solidHeader = TRUE,
              verbatimTextOutput("dataSummary"))
        )
      ),
      # Linear Model Tab
      bs4TabItem(
        tabName = "linear",
        fluidRow(
          box(title = "Linear Model Summary", width = 12, status = "primary", solidHeader = TRUE,
              verbatimTextOutput("linSummary"))
        ),
        fluidRow(
          box(title = "Linear Model Prediction Plot", width = 12, status = "primary", solidHeader = TRUE,
              plotOutput("linPlot", height = "400px"),
              downloadButton("downloadLinPlot", "Download Linear Plot")
          )
        )
      ),
      # Quadratic Model Tab
      bs4TabItem(
        tabName = "quadratic",
        fluidRow(
          box(title = "Quadratic Model Summary", width = 12, status = "primary", solidHeader = TRUE,
              verbatimTextOutput("quadSummary"))
        ),
        fluidRow(
          box(title = "Quadratic Model Prediction Plot", width = 12, status = "primary", solidHeader = TRUE,
              plotOutput("quadPlot", height = "400px"),
              downloadButton("downloadQuadPlot", "Download Quadratic Plot")
          )
        )
      ),
      # Spline Model Tab
      bs4TabItem(
        tabName = "spline",
        fluidRow(
          box(title = "Spline Model Summary", width = 12, status = "warning", solidHeader = TRUE,
              verbatimTextOutput("splineSummary"))
        ),
        fluidRow(
          box(title = "Spline Model Prediction Plot", width = 12, status = "warning", solidHeader = TRUE,
              plotOutput("splinePlot", height = "400px"),
              downloadButton("downloadSplinePlot", "Download Spline Plot")
          )
        )
      ),
      # Residuals Tab
      bs4TabItem(
        tabName = "residual",
        fluidRow(
          box(title = "Residual Plot (Linear Model)", width = 12, status = "danger", solidHeader = TRUE,
              plotOutput("residPlot", height = "400px"),
              downloadButton("downloadResidPlot", "Download Residual Plot")
          )
        )
      ),
      # Fitted vs. Observed Tab
      bs4TabItem(
        tabName = "fitObs",
        fluidRow(
          box(title = "Fitted vs. Observed (Linear Model)", width = 12, status = "info", solidHeader = TRUE,
              plotOutput("fitObsPlot", height = "400px"),
              downloadButton("downloadFitObsPlot", "Download Fitted vs. Observed Plot")
          )
        )
      ),
      # Q-Q Plot Tab
      bs4TabItem(
        tabName = "qq",
        fluidRow(
          box(title = "Q-Q Plot of Residuals (Linear Model)", width = 12, status = "info", solidHeader = TRUE,
              plotOutput("qqPlot", height = "400px"),
              downloadButton("downloadQQPlot", "Download Q-Q Plot")
          )
        )
      ),
      # Residual Histogram Tab
      bs4TabItem(
        tabName = "hist",
        fluidRow(
          box(title = "Histogram of Residuals (Linear Model)", width = 12, status = "info", solidHeader = TRUE,
              plotOutput("histPlot", height = "400px"),
              downloadButton("downloadHistPlot", "Download Residual Histogram")
          )
        )
      ),
      # Bubble Plot Tab
      bs4TabItem(
        tabName = "bubble",
        fluidRow(
          box(title = "Bubble Plot of Raw Data", width = 12, status = "info", solidHeader = TRUE,
              plotOutput("bubblePlot", height = "400px"),
              downloadButton("downloadBubblePlot", "Download Bubble Plot")
          )
        )
      ),
      # Study Trends Tab
      bs4TabItem(
        tabName = "studytrend",
        fluidRow(
          box(title = "Study-Specific Trends", width = 12, status = "primary", solidHeader = TRUE,
              plotOutput("studyTrendPlot", height = "400px"),
              downloadButton("downloadStudyTrendPlot", "Download Study Trends Plot")
          )
        )
      ),
      # Forest Plot Tab
      bs4TabItem(
        tabName = "forest",
        fluidRow(
          box(title = "Forest Plot (Raw Data)", width = 12, status = "primary", solidHeader = TRUE,
              plotOutput("forestPlot", height = "400px"),
              downloadButton("downloadForestPlot", "Download Forest Plot")
          )
        )
      ),
      # Model Comparison Tab
      bs4TabItem(
        tabName = "compare",
        fluidRow(
          box(title = "Model Fit Comparison", width = 12, status = "success", solidHeader = TRUE,
              DTOutput("modelTable"))
        )
      ),
      # Model Coefficients Tab
      bs4TabItem(
        tabName = "coef",
        fluidRow(
          box(title = "Model Coefficients", width = 12, status = "primary", solidHeader = TRUE,
              DTOutput("coefTable"))
        )
      ),
      # CSV Template Tab
      bs4TabItem(
        tabName = "csv",
        fluidRow(
          box(title = "CSV Template and Instructions", width = 12, status = "info", solidHeader = TRUE,
              HTML("<h3>CSV Template</h3>
                    <p>Your CSV file must include the following columns (with exactly these names):</p>
                    <ul>
                      <li><b>id</b>: Study identifier (e.g., 1, 2, 3...)</li>
                      <li><b>dose</b>: The dose value (numeric)</li>
                      <li><b>logrr</b>: The natural logarithm of the relative risk (numeric)</li>
                      <li><b>se</b>: Standard error for logrr (numeric)</li>
                      <li><b>type</b>: Study design type (e.g., 'ci' for cumulative incidence)</li>
                      <li><b>cases</b>: Number of cases (numeric)</li>
                      <li><b>n</b>: Total number of subjects (numeric)</li>
                    </ul>
                    <p>A sample CSV file content is shown below:</p>
                    <pre>
id,dose,logrr,se,type,cases,n
1,0,0,0.05,ci,20,200
1,10,-0.1,0.07,ci,25,200
1,20,-0.2,0.10,ci,28,200
2,0,0,0.06,ci,15,220
2,15,-0.05,0.08,ci,18,220
2,30,-0.1,0.10,ci,22,220
                    </pre>
                    <p>Please ensure your CSV file is saved with these column names and formats.</p>")
          )
        )
      ),
      # Options Tab
      bs4TabItem(
        tabName = "options",
        fluidRow(
          box(title = "Plot Options", width = 12, status = "info", solidHeader = TRUE,
              selectInput("method", "Estimation Method", choices = c("fixed", "reml"), selected = "fixed"),
              numericInput("xref", "Spline Reference Dose (xref)", value = 0, min = 0),
              sliderInput("nPoints", "Number of Prediction Points", min = 50, max = 200, value = 100),
              sliderInput("ciLevel", "Confidence Level", min = 0.80, max = 0.99, value = 0.95, step = 0.01),
              checkboxInput("showCI", "Show Confidence Interval Lines", value = TRUE),
              checkboxInput("showRaw", "Overlay Raw Data on Prediction Plots", value = FALSE),
              selectInput("themeChoice", "Plot Theme", choices = c("Minimal", "Black & White"), selected = "Minimal"),
              sliderInput("ptSize", "Raw Data Point Size", min = 1, max = 6, value = 3, step = 0.5),
              sliderInput("alpha", "Raw Data Transparency", min = 0.1, max = 1, value = 0.7),
              sliderInput("lineWidth", "Prediction Line Width", min = 1, max = 5, value = 2, step = 0.5),
              checkboxInput("includeSpline", "Include Spline in Combined Trends", value = TRUE),
              checkboxInput("showCombinedLegend", "Show Legend in Combined Trends", value = TRUE),
              sliderInput("textSize", "Plot Text Size (for ggplot)", min = 8, max = 20, value = 12),
              checkboxInput("showGrid", "Show Grid Lines (for ggplot)", value = TRUE),
              textInput("bgColor", "Plot Background Color", value = "white")
          )
        )
      ),
      # Download Plots Tab
      bs4TabItem(
        tabName = "download",
        fluidRow(
          box(title = "Download All Plots", width = 12, status = "info", solidHeader = TRUE,
              downloadButton("downloadLinPlot", "Download Linear Plot"),
              downloadButton("downloadQuadPlot", "Download Quadratic Plot"),
              downloadButton("downloadSplinePlot", "Download Spline Plot"),
              downloadButton("downloadResidPlot", "Download Residual Plot"),
              downloadButton("downloadFitObsPlot", "Download Fitted vs. Observed Plot"),
              downloadButton("downloadQQPlot", "Download Q-Q Plot"),
              downloadButton("downloadHistPlot", "Download Residual Histogram"),
              downloadButton("downloadBubblePlot", "Download Bubble Plot"),
              downloadButton("downloadStudyTrendPlot", "Download Study Trends Plot"),
              downloadButton("downloadForestPlot", "Download Forest Plot")
          )
        )
      ),
      # About Tab
      bs4TabItem(
        tabName = "about",
        fluidRow(
          box(title = "About This App", width = 12, status = "info", solidHeader = TRUE,
              HTML("<h3>Doseâ€“Response Meta-Analysis App</h3>
                    <p>This app implements doseâ€“response meta-analysis using the <a href='https://alecri.github.io/software/dosresmeta.html' target='_blank'>dosresmeta</a> package in R.
                    It fits linear, quadratic, and restricted cubic spline models and displays a variety of diagnostic plots, summary tables, and model outputs.
                    You can modify plot options (e.g., text size, grid, background color) and download each plot as a PNG file.
                    </p>
                    <p>Developed by [Your Name].</p>")
          )
        )
      )
    )
  ),
  controlbar = bs4DashControlbar(),
  footer = bs4DashFooter()
)

# ---------------------------
# Server
# ---------------------------
server <- function(input, output, session) {
  
  # Reactive Data: Use uploaded CSV if available; otherwise, use built-in alcohol_cvd.
  dataInput <- reactive({
    if (is.null(input$file)) {
      data("alcohol_cvd", package = "dosresmeta")
      dat <- alcohol_cvd
    } else {
      req(input$file)
      dat <- read.csv(input$file$datapath, stringsAsFactors = FALSE)
      dat$id    <- as.factor(dat$id)
      dat$dose  <- as.numeric(dat$dose)
      dat$logrr <- as.numeric(dat$logrr)
      dat$se    <- as.numeric(dat$se)
      dat$type  <- as.character(dat$type)
      dat$cases <- as.numeric(dat$cases)
      dat$n     <- as.numeric(dat$n)
    }
    dat <- dat[order(dat$id, dat$dose), ]
    dat <- filter_data(dat)
    if(is.null(dat) || nrow(dat) == 0) {
      stop("No studies with at least two non-reference dose groups remain after filtering.")
    }
    dat
  })
  
  output$dataTable <- renderDT({ dataInput() })
  
  output$dataSummary <- renderPrint({
    dat <- dataInput()
    make_data_summary(dat)
  })
  
  ## Reactive Models
  
  linearModel <- reactive({
    dat <- dataInput()
    dosresmeta(
      formula = logrr ~ dose,
      id = id,
      type = type,
      se = se,
      cases = cases,
      n = n,
      data = dat,
      method = input$method
    )
  })
  output$linSummary <- renderPrint({ summary(linearModel()) })
  
  output$linPlot <- renderPlot({
    mod <- linearModel()
    dat <- dataInput()
    dose_seq <- seq(min(dat$dose), max(dat$dose), length.out = input$nPoints)
    newdata <- data.frame(dose = dose_seq)
    pred <- predict(mod, newdata, order = TRUE, exp = TRUE, ci.level = input$ciLevel)
    # Base R plot with added options:
    plot(pred$dose, pred$pred, type = "l", col = "blue", lwd = input$lineWidth,
         cex.axis = input$textSize/12, cex.lab = input$textSize/12, cex.main = input$textSize/12,
         ylim = range(c(pred$ci.lb, pred$ci.ub), na.rm = TRUE),
         xlab = "Dose (grams/day)", ylab = "Relative Risk",
         main = "Linear Model Predictions", bg = input$bgColor)
    if(input$showCI){
      lines(pred$dose, pred$ci.lb, lty = 2, col = "blue", lwd = input$lineWidth)
      lines(pred$dose, pred$ci.ub, lty = 2, col = "blue", lwd = input$lineWidth)
    }
    if(input$showRaw){
      points(dat$dose, exp(dat$logrr), pch = 16,
             col = if(input$themeChoice=="Black & White") "black" else "gray",
             cex = input$ptSize, alpha = input$alpha)
    }
    if(input$showGrid) grid()
  })
  
  quadraticModel <- reactive({
    dat <- dataInput()
    dosresmeta(
      formula = logrr ~ dose + I(dose^2),
      id = id,
      type = type,
      se = se,
      cases = cases,
      n = n,
      data = dat,
      method = input$method
    )
  })
  output$quadSummary <- renderPrint({ summary(quadraticModel()) })
  
  output$quadPlot <- renderPlot({
    mod <- quadraticModel()
    dat <- dataInput()
    dose_seq <- seq(min(dat$dose), max(dat$dose), length.out = input$nPoints)
    newdata <- data.frame(dose = dose_seq)
    pred <- predict(mod, newdata, order = TRUE, exp = TRUE, ci.level = input$ciLevel)
    plot(pred$dose, pred$pred, type = "l", col = "darkgreen", lwd = input$lineWidth,
         cex.axis = input$textSize/12, cex.lab = input$textSize/12, cex.main = input$textSize/12,
         ylim = range(c(pred$ci.lb, pred$ci.ub), na.rm = TRUE),
         xlab = "Dose (grams/day)", ylab = "Relative Risk",
         main = "Quadratic Model Predictions", bg = input$bgColor)
    if(input$showCI){
      lines(pred$dose, pred$ci.lb, lty = 2, col = "darkgreen", lwd = input$lineWidth)
      lines(pred$dose, pred$ci.ub, lty = 2, col = "darkgreen", lwd = input$lineWidth)
    }
    if(input$showRaw){
      points(dat$dose, exp(dat$logrr), pch = 16,
             col = if(input$themeChoice=="Black & White") "black" else "gray",
             cex = input$ptSize, alpha = input$alpha)
    }
    if(input$showGrid) grid()
  })
  
  splineModel <- reactive({
    dat <- dataInput()
    knots <- quantile(dat$dose, c(0.05, 0.35, 0.65, 0.95))
    dosresmeta(
      formula = logrr ~ rcs(dose, knots),
      id = id,
      type = type,
      se = se,
      cases = cases,
      n = n,
      data = dat,
      method = input$method
    )
  })
  output$splineSummary <- renderPrint({ summary(splineModel()) })
  
  output$splinePlot <- renderPlot({
    mod <- splineModel()
    dat <- dataInput()
    dose_seq <- seq(min(dat$dose), max(dat$dose), length.out = input$nPoints)
    newdata <- data.frame(dose = dose_seq)
    pred <- tryCatch(predict(mod, newdata, xref = input$xref, order = TRUE, exp = TRUE, ci.level = input$ciLevel),
                     error = function(e) NULL)
    if(is.null(pred)) {
      plot.new()
      title("Spline prediction failed.")
    } else {
      pred <- fix_pred(pred)
      plot(pred$dose, pred$pred, type = "l", col = "purple", lwd = input$lineWidth,
           cex.axis = input$textSize/12, cex.lab = input$textSize/12, cex.main = input$textSize/12,
           ylim = range(c(pred$ci.lb, pred$ci.ub), na.rm = TRUE),
           xlab = "Dose (grams/day)", ylab = "Relative Risk",
           main = "Spline Model Predictions", bg = input$bgColor)
      if(input$showCI){
        lines(pred$dose, pred$ci.lb, lty = 2, col = "purple", lwd = input$lineWidth)
        lines(pred$dose, pred$ci.ub, lty = 2, col = "purple", lwd = input$lineWidth)
      }
      if(input$showRaw){
        points(dat$dose, exp(dat$logrr), pch = 16,
               col = if(input$themeChoice=="Black & White") "black" else "gray",
               cex = input$ptSize, alpha = input$alpha)
      }
      if(input$showGrid) grid()
    }
  })
  
  # Combined Trends removed per user instruction.
  
  output$residPlot <- renderPlot({
    mod <- linearModel()
    dat <- dataInput()
    res <- residuals(mod)
    fitted_vals <- mod$fitted.values
    n_obs <- min(length(res), length(fitted_vals), nrow(dat))
    res <- res[1:n_obs]
    fitted_vals <- fitted_vals[1:n_obs]
    xvals <- dat$dose[1:n_obs]
    plot(xvals, res, xlab = "Dose (grams/day)", ylab = "Residuals",
         main = "Residuals vs Dose (Linear Model)", pch = 16, col = "red",
         cex.axis = input$textSize/12, cex.lab = input$textSize/12, cex.main = input$textSize/12)
    abline(h = 0, lty = 2)
    if(input$showGrid) grid()
  })
  
  output$fitObsPlot <- renderPlot({
    mod <- linearModel()
    dat <- dataInput()
    fitted_vals <- mod$fitted.values
    observed <- exp(dat$logrr)
    n_obs <- min(length(fitted_vals), length(observed))
    df <- data.frame(Fitted = fitted_vals[1:n_obs],
                     Observed = observed[1:n_obs])
    ggplot(df, aes(x = Fitted, y = Observed)) +
      geom_point(color = "blue", size = 3) +
      geom_smooth(method = "loess", se = FALSE, color = "black") +
      geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
      labs(x = "Fitted Relative Risk", y = "Observed Relative Risk",
           title = "Fitted vs. Observed (Linear Model)") +
      theme_minimal(base_size = input$textSize) +
      theme(panel.grid.major = if(input$showGrid) element_line() else element_blank(),
            panel.grid.minor = if(input$showGrid) element_line() else element_blank(),
            plot.background = element_rect(fill = input$bgColor))
  })
  
  output$qqPlot <- renderPlot({
    mod <- linearModel()
    res <- residuals(mod)
    qqnorm(res, main = "Q-Q Plot of Residuals (Linear Model)", cex.axis = input$textSize/12, cex.lab = input$textSize/12, cex.main = input$textSize/12)
    qqline(res, col = "red", lty = 2)
  })
  
  output$histPlot <- renderPlot({
    mod <- linearModel()
    res <- residuals(mod)
    hist(res, breaks = 20, main = "Histogram of Residuals (Linear Model)",
         xlab = "Residuals", col = "lightblue", border = "white", cex.axis = input$textSize/12, cex.lab = input$textSize/12, cex.main = input$textSize/12)
  })
  
  output$bubblePlot <- renderPlot({
    dat <- dataInput()
    ggplot(dat, aes(x = dose, y = logrr, size = 1/se, color = id)) +
      geom_point(alpha = input$alpha) +
      scale_size_area(max_size = 10) +
      labs(x = "Dose (grams/day)", y = "Log Relative Risk", size = "1/SE", color = "Study ID") +
      theme_minimal(base_size = input$textSize) +
      theme(panel.grid.major = if(input$showGrid) element_line() else element_blank(),
            panel.grid.minor = if(input$showGrid) element_line() else element_blank(),
            plot.background = element_rect(fill = input$bgColor)) +
      ggtitle("Bubble Plot of Raw Data")
  })
  
  output$studyTrendPlot <- renderPlot({
    dat <- dataInput()
    ggplot(dat, aes(x = dose, y = logrr)) +
      geom_point(size = input$ptSize, color = if(input$themeChoice=="Black & White") "black" else "darkblue") +
      geom_line(color = if(input$themeChoice=="Black & White") "black" else "darkblue") +
      facet_wrap(~ id) +
      labs(x = "Dose (grams/day)", y = "Log Relative Risk") +
      theme_minimal(base_size = input$textSize) +
      theme(panel.grid.major = if(input$showGrid) element_line() else element_blank(),
            panel.grid.minor = if(input$showGrid) element_line() else element_blank(),
            plot.background = element_rect(fill = input$bgColor)) +
      ggtitle("Study-Specific Trends")
  })
  
  output$forestPlot <- renderPlot({
    dat <- dataInput()
    fdat <- make_forest_data(dat)
    ggplot(fdat, aes(x = RR, y = reorder(as.factor(id), as.numeric(id)))) +
      geom_point(size = 3, color = "darkred") +
      geom_errorbarh(aes(xmin = RR_lb, xmax = RR_ub), height = 0.2, color = "darkred") +
      labs(x = "Relative Risk", y = "Study ID", title = "Forest Plot (Raw Data)") +
      theme_minimal(base_size = input$textSize) +
      theme(panel.grid.major = if(input$showGrid) element_line() else element_blank(),
            panel.grid.minor = if(input$showGrid) element_line() else element_blank(),
            plot.background = element_rect(fill = input$bgColor))
  })
  
  output$modelTable <- renderDT({
    models <- list(
      Linear = tryCatch(linearModel(), error = function(e) NULL),
      Quadratic = tryCatch(quadraticModel(), error = function(e) NULL),
      Spline = tryCatch(splineModel(), error = function(e) NULL)
    )
    comp <- lapply(names(models), function(name) {
      mod <- models[[name]]
      if(!is.null(mod)) {
        aic_val <- tryCatch(AIC(mod), error = function(e) NA)
        bic_val <- tryCatch(BIC(mod), error = function(e) NA)
      } else {
        aic_val <- NA; bic_val <- NA
      }
      data.frame(Model = name, AIC = aic_val, BIC = bic_val)
    })
    comp_df <- do.call(rbind, comp)
    comp_df
  })
  
  output$coefTable <- renderDT({
    lin_df <- tryCatch({
      coefs <- coef(linearModel())
      ses   <- sqrt(diag(vcov(linearModel())))
      data.frame(Model = "Linear", Term = names(coefs), Estimate = round(coefs, 3), SE = round(ses, 3), stringsAsFactors = FALSE)
    }, error = function(e) NULL)
    quad_df <- tryCatch({
      coefs <- coef(quadraticModel())
      ses   <- sqrt(diag(vcov(quadraticModel())))
      data.frame(Model = "Quadratic", Term = names(coefs), Estimate = round(coefs, 3), SE = round(ses, 3), stringsAsFactors = FALSE)
    }, error = function(e) NULL)
    spl_df <- tryCatch({
      coefs <- coef(splineModel())
      ses   <- sqrt(diag(vcov(splineModel())))
      data.frame(Model = "Spline", Term = names(coefs), Estimate = round(coefs, 3), SE = round(ses, 3), stringsAsFactors = FALSE)
    }, error = function(e) NULL)
    coef_df <- do.call(rbind, list(lin_df, quad_df, spl_df))
    coef_df
  })
  
  output$downloadData <- downloadHandler(
    filename = function() { paste("filtered_data-", Sys.Date(), ".csv", sep = "") },
    content = function(file) { write.csv(dataInput(), file, row.names = FALSE) }
  )
  
  # ---------------
  # Download Handlers for Plots
  # ---------------
  output$downloadLinPlot <- downloadHandler(
    filename = function() { paste("LinearPlot-", Sys.Date(), ".png", sep="") },
    content = function(file) {
      png(file, width = 800, height = 600)
      mod <- linearModel()
      dat <- dataInput()
      dose_seq <- seq(min(dat$dose), max(dat$dose), length.out = input$nPoints)
      newdata <- data.frame(dose = dose_seq)
      pred <- predict(mod, newdata, order = TRUE, exp = TRUE, ci.level = input$ciLevel)
      plot(pred$dose, pred$pred, type = "l", col = "blue", lwd = input$lineWidth,
           cex.axis = input$textSize/12, cex.lab = input$textSize/12, cex.main = input$textSize/12,
           ylim = range(c(pred$ci.lb, pred$ci.ub), na.rm = TRUE),
           xlab = "Dose (grams/day)", ylab = "Relative Risk",
           main = "Linear Model Predictions", bg = input$bgColor)
      if(input$showCI){
        lines(pred$dose, pred$ci.lb, lty = 2, col = "blue", lwd = input$lineWidth)
        lines(pred$dose, pred$ci.ub, lty = 2, col = "blue", lwd = input$lineWidth)
      }
      if(input$showRaw){
        points(dat$dose, exp(dat$logrr), pch = 16,
               col = if(input$themeChoice=="Black & White") "black" else "gray",
               cex = input$ptSize, alpha = input$alpha)
      }
      if(input$showGrid) grid()
      dev.off()
    }
  )
  
  output$downloadQuadPlot <- downloadHandler(
    filename = function() { paste("QuadraticPlot-", Sys.Date(), ".png", sep="") },
    content = function(file) {
      png(file, width = 800, height = 600)
      mod <- quadraticModel()
      dat <- dataInput()
      dose_seq <- seq(min(dat$dose), max(dat$dose), length.out = input$nPoints)
      newdata <- data.frame(dose = dose_seq)
      pred <- predict(mod, newdata, order = TRUE, exp = TRUE, ci.level = input$ciLevel)
      plot(pred$dose, pred$pred, type = "l", col = "darkgreen", lwd = input$lineWidth,
           cex.axis = input$textSize/12, cex.lab = input$textSize/12, cex.main = input$textSize/12,
           ylim = range(c(pred$ci.lb, pred$ci.ub), na.rm = TRUE),
           xlab = "Dose (grams/day)", ylab = "Relative Risk",
           main = "Quadratic Model Predictions", bg = input$bgColor)
      if(input$showCI){
        lines(pred$dose, pred$ci.lb, lty = 2, col = "darkgreen", lwd = input$lineWidth)
        lines(pred$dose, pred$ci.ub, lty = 2, col = "darkgreen", lwd = input$lineWidth)
      }
      if(input$showRaw){
        points(dat$dose, exp(dat$logrr), pch = 16,
               col = if(input$themeChoice=="Black & White") "black" else "gray",
               cex = input$ptSize, alpha = input$alpha)
      }
      if(input$showGrid) grid()
      dev.off()
    }
  )
  
  output$downloadSplinePlot <- downloadHandler(
    filename = function() { paste("SplinePlot-", Sys.Date(), ".png", sep="") },
    content = function(file) {
      png(file, width = 800, height = 600)
      mod <- splineModel()
      dat <- dataInput()
      dose_seq <- seq(min(dat$dose), max(dat$dose), length.out = input$nPoints)
      newdata <- data.frame(dose = dose_seq)
      pred <- tryCatch(predict(mod, newdata, xref = input$xref, order = TRUE, exp = TRUE, ci.level = input$ciLevel),
                       error = function(e) NULL)
      if(is.null(pred)) {
        plot.new()
        title("Spline prediction failed.")
      } else {
        pred <- fix_pred(pred)
        plot(pred$dose, pred$pred, type = "l", col = "purple", lwd = input$lineWidth,
             cex.axis = input$textSize/12, cex.lab = input$textSize/12, cex.main = input$textSize/12,
             ylim = range(c(pred$ci.lb, pred$ci.ub), na.rm = TRUE),
             xlab = "Dose (grams/day)", ylab = "Relative Risk",
             main = "Spline Model Predictions", bg = input$bgColor)
        if(input$showCI){
          lines(pred$dose, pred$ci.lb, lty = 2, col = "purple", lwd = input$lineWidth)
          lines(pred$dose, pred$ci.ub, lty = 2, col = "purple", lwd = input$lineWidth)
        }
        if(input$showRaw){
          points(dat$dose, exp(dat$logrr), pch = 16,
                 col = if(input$themeChoice=="Black & White") "black" else "gray",
                 cex = input$ptSize, alpha = input$alpha)
        }
        if(input$showGrid) grid()
      }
      dev.off()
    }
  )
  
  output$downloadResidPlot <- downloadHandler(
    filename = function() { paste("ResidualPlot-", Sys.Date(), ".png", sep="") },
    content = function(file) {
      png(file, width = 800, height = 600)
      mod <- linearModel()
      dat <- dataInput()
      res <- residuals(mod)
      fitted_vals <- mod$fitted.values
      n_obs <- min(length(res), length(fitted_vals), nrow(dat))
      res <- res[1:n_obs]
      fitted_vals <- fitted_vals[1:n_obs]
      xvals <- dat$dose[1:n_obs]
      plot(xvals, res, xlab = "Dose (grams/day)", ylab = "Residuals",
           main = "Residuals vs Dose (Linear Model)", pch = 16, col = "red",
           cex.axis = input$textSize/12, cex.lab = input$textSize/12, cex.main = input$textSize/12)
      abline(h = 0, lty = 2)
      if(input$showGrid) grid()
      dev.off()
    }
  )
  
  output$downloadFitObsPlot <- downloadHandler(
    filename = function() { paste("FitObsPlot-", Sys.Date(), ".png", sep="") },
    content = function(file) {
      png(file, width = 800, height = 600)
      mod <- linearModel()
      dat <- dataInput()
      fitted_vals <- mod$fitted.values
      observed <- exp(dat$logrr)
      n_obs <- min(length(fitted_vals), length(observed))
      df <- data.frame(Fitted = fitted_vals[1:n_obs],
                       Observed = observed[1:n_obs])
      p <- ggplot(df, aes(x = Fitted, y = Observed)) +
        geom_point(color = "blue", size = 3) +
        geom_smooth(method = "loess", se = FALSE, color = "black") +
        geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
        labs(x = "Fitted Relative Risk", y = "Observed Relative Risk",
             title = "Fitted vs. Observed (Linear Model)") +
        theme_minimal(base_size = input$textSize) +
        theme(panel.grid.major = if(input$showGrid) element_line() else element_blank(),
              panel.grid.minor = if(input$showGrid) element_line() else element_blank(),
              plot.background = element_rect(fill = input$bgColor))
      print(p)
      dev.off()
    }
  )
  
  output$downloadQQPlot <- downloadHandler(
    filename = function() { paste("QQPlot-", Sys.Date(), ".png", sep="") },
    content = function(file) {
      png(file, width = 800, height = 600)
      mod <- linearModel()
      res <- residuals(mod)
      qqnorm(res, main = "Q-Q Plot of Residuals (Linear Model)",
             cex.axis = input$textSize/12, cex.lab = input$textSize/12, cex.main = input$textSize/12)
      qqline(res, col = "red", lty = 2)
      dev.off()
    }
  )
  
  output$downloadHistPlot <- downloadHandler(
    filename = function() { paste("HistPlot-", Sys.Date(), ".png", sep="") },
    content = function(file) {
      png(file, width = 800, height = 600)
      mod <- linearModel()
      res <- residuals(mod)
      hist(res, breaks = 20, main = "Histogram of Residuals (Linear Model)",
           xlab = "Residuals", col = "lightblue", border = "white",
           cex.axis = input$textSize/12, cex.lab = input$textSize/12, cex.main = input$textSize/12)
      dev.off()
    }
  )
  
  output$downloadBubblePlot <- downloadHandler(
    filename = function() { paste("BubblePlot-", Sys.Date(), ".png", sep="") },
    content = function(file) {
      png(file, width = 800, height = 600)
      dat <- dataInput()
      p <- ggplot(dat, aes(x = dose, y = logrr, size = 1/se, color = id)) +
        geom_point(alpha = input$alpha) +
        scale_size_area(max_size = 10) +
        labs(x = "Dose (grams/day)", y = "Log Relative Risk", size = "1/SE", color = "Study ID") +
        theme_minimal(base_size = input$textSize) +
        theme(panel.grid.major = if(input$showGrid) element_line() else element_blank(),
              panel.grid.minor = if(input$showGrid) element_line() else element_blank(),
              plot.background = element_rect(fill = input$bgColor)) +
        ggtitle("Bubble Plot of Raw Data")
      print(p)
      dev.off()
    }
  )
  
  output$downloadStudyTrendPlot <- downloadHandler(
    filename = function() { paste("StudyTrendPlot-", Sys.Date(), ".png", sep="") },
    content = function(file) {
      png(file, width = 800, height = 600)
      dat <- dataInput()
      p <- ggplot(dat, aes(x = dose, y = logrr)) +
        geom_point(size = input$ptSize, color = if(input$themeChoice=="Black & White") "black" else "darkblue") +
        geom_line(color = if(input$themeChoice=="Black & White") "black" else "darkblue") +
        facet_wrap(~ id) +
        labs(x = "Dose (grams/day)", y = "Log Relative Risk") +
        theme_minimal(base_size = input$textSize) +
        theme(panel.grid.major = if(input$showGrid) element_line() else element_blank(),
              panel.grid.minor = if(input$showGrid) element_line() else element_blank(),
              plot.background = element_rect(fill = input$bgColor)) +
        ggtitle("Study-Specific Trends")
      print(p)
      dev.off()
    }
  )
  
  output$downloadForestPlot <- downloadHandler(
    filename = function() { paste("ForestPlot-", Sys.Date(), ".png", sep="") },
    content = function(file) {
      png(file, width = 800, height = 600)
      dat <- dataInput()
      fdat <- make_forest_data(dat)
      p <- ggplot(fdat, aes(x = RR, y = reorder(as.factor(id), as.numeric(id)))) +
        geom_point(size = 3, color = "darkred") +
        geom_errorbarh(aes(xmin = RR_lb, xmax = RR_ub), height = 0.2, color = "darkred") +
        labs(x = "Relative Risk", y = "Study ID", title = "Forest Plot (Raw Data)") +
        theme_minimal(base_size = input$textSize) +
        theme(panel.grid.major = if(input$showGrid) element_line() else element_blank(),
              panel.grid.minor = if(input$showGrid) element_line() else element_blank(),
              plot.background = element_rect(fill = input$bgColor))
      print(p)
      dev.off()
    }
  )
  
  output$downloadData <- downloadHandler(
    filename = function() { paste("filtered_data-", Sys.Date(), ".csv", sep = "") },
    content = function(file) {
      write.csv(dataInput(), file, row.names = FALSE)
    }
  )
  
  output$coefTable <- renderDT({
    lin_df <- tryCatch({
      coefs <- coef(linearModel())
      ses   <- sqrt(diag(vcov(linearModel())))
      data.frame(Model = "Linear", Term = names(coefs), Estimate = round(coefs, 3), SE = round(ses, 3), stringsAsFactors = FALSE)
    }, error = function(e) NULL)
    quad_df <- tryCatch({
      coefs <- coef(quadraticModel())
      ses   <- sqrt(diag(vcov(quadraticModel())))
      data.frame(Model = "Quadratic", Term = names(coefs), Estimate = round(coefs, 3), SE = round(ses, 3), stringsAsFactors = FALSE)
    }, error = function(e) NULL)
    spl_df <- tryCatch({
      coefs <- coef(splineModel())
      ses   <- sqrt(diag(vcov(splineModel())))
      data.frame(Model = "Spline", Term = names(coefs), Estimate = round(coefs, 3), SE = round(ses, 3), stringsAsFactors = FALSE)
    }, error = function(e) NULL)
    coef_df <- do.call(rbind, list(lin_df, quad_df, spl_df))
    coef_df
  })
}

shinyApp(ui, server)
